package MongoDBEjercicios.CRUDBBDD;

import MongoDBEjercicios.Mostrar.Mostrar;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import com.mongodb.client.result.DeleteResult;
import com.mongodb.client.result.UpdateResult;
import org.bson.Document;
import org.bson.conversions.Bson;


public class MongoCRUD {
    private MongoCollection<Document> collection;
    private FindIterable<Document> todaLaColeccion;
    private Mostrar mostrarDatos = new Mostrar();

    public MongoCRUD(MongoCollection<Document> collection) {
        this.collection = collection;
    }

    public void leerBBDD() {
        todaLaColeccion = collection.find();

        //todaLaColeccion.forEach(System.out::println);
        mostrarDatos.mostrarInformacionDocument(todaLaColeccion);
    }

    public void escribir(Document documento) {
        collection.insertOne(documento);
        mostrarDatos.mostrarInformacionString(new String[]{"Escritura correcta!!"});
    }

    public void borrar(String clave, String valor) {
        // filtro para ver lo que queremos eliminar de ejemplo clave name y valor pedro
        Bson filter = Filters.eq(clave, valor);
        DeleteResult resultadoBorrado = collection.deleteMany(filter);

        mostrarDatos.mostrarInformacionConcat(resultadoBorrado.getDeletedCount(), "Total de datos eliminados: ");
    }

    public void borrarTodosLosdocumentos() {
        DeleteResult resultadoBorrado = collection.deleteMany(Filters.empty());
        mostrarDatos.mostrarInformacionConcat(resultadoBorrado.getDeletedCount(),"Total de datos eliminados: ");
    }

    public void actualizar(String claveF, String valorF, String claveModificada, String valorModificado) {
        // filtro para ver lo que queremos modificar de ejemplo claveF name y valorF pedro
        Bson filter = Filters.eq(claveF, valorF);
        //claveF - valorF de data nueva
        Bson nuevaActualizacion = Updates.set(claveModificada, valorModificado);
        UpdateResult resultado = collection.updateOne(filter, nuevaActualizacion);
        mostrarDatos.mostrarInformacionConcat(resultado.getMatchedCount(),"Total de datos acualizados: ");
    }

    public void filtrarDatos(String clave, String valor) {
        Bson filtro = Filters.eq(clave, valor);

        todaLaColeccion = collection.find(filtro);
        System.out.println("----------------");
        mostrarDatos.mostrarInformacionDocument(todaLaColeccion);

    }

}
//////////////////////////////////////////////////////////////////////////////////////
package MongoDBEjercicios.BBDDManager;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;


import java.util.List;

public class BBBDDGestor {
    private MongoClient mongoClient;
    private MongoDatabase mongoDatabase;
    private List<String> props;

    public BBBDDGestor(List<String> props) {
        this.props = props;
        mongoClient = MongoClients.create(props.get(0));
        System.out.println("Coneccion establecida!");
    }

    public MongoCollection<Document> obtenerBasesDeDatos(String nombreTabla) {
        mongoDatabase = mongoClient.getDatabase(props.get(1));
        MongoCollection<Document> collection = mongoDatabase.getCollection(nombreTabla);
        return collection;
//        Document doc = new Document();
//
//        collection.insertOne(doc);
//        desconectar();
    }

    public void desconectar() {
        mongoClient.close();
    }

/**
 * Martes 25 examen acceso a datos
 * Viernes 21 examen sistemas de gestion empresarial
 * revisar url mongo db
 * https://ualmtorres.github.io/howtos/MongoDBJava/
 * **/

}
/////////////////////////////////////////////////////////////////////////////////////////////////
package MongoDBEjercicios.Mostrar;

import com.mongodb.client.FindIterable;
import org.bson.Document;

public class Mostrar {

    public void mostrarInformacionDocument(FindIterable<Document> docs) {

        for (Document dc : docs) {
            System.out.println("----------------------------------------");
            System.out.println(dc);
            System.out.println("----------------------------------------");
        }

    }

    public void mostrarInformacionString(String[] data) {
        for (String datos : data) {
            System.out.println(datos);
        }
    }

    public void mostrarInformacionConcat(Long resultado, String text) {
        System.out.println(text + resultado);

    }
}
//////////////////////////////////////////////////////////////////////////////////////////
package MongoDBEjercicios;

import MongoDBEjercicios.BBDDManager.BBBDDGestor;
import MongoDBEjercicios.CRUDBBDD.MongoCRUD;
import com.mongodb.client.MongoCollection;
import org.bson.Document;

import java.util.ArrayList;
import java.util.List;

public class jj {

    public static void main(String[] args) {

        List<String> data = new ArrayList<>();
        data.add("mongodb://localhost:27017/");
        data.add("local");

        BBBDDGestor gestor = new BBBDDGestor(data);

        MongoCollection<Document> docs = gestor.obtenerBasesDeDatos("nueva-tabla");
        // Operaciones CRUD -Pruebas realizadas = 10/10
        // leer
        MongoCRUD mcrud = new MongoCRUD(docs);
        // mcrud.leerBBDD();
        // escribir
        // mcrud.escribir(new Document("nombre","carlos").append("apellidos","rodriguez").append("edad",20));
        //    borrar con datos ficticios
        //   mcrud.borrar("nombre","ahora");

        // borrar todos los documentos

        //mcrud.borrarTodosLosdocumentos();

        //actualizar

        // mcrud.actualizar("nombre","carlos","nombre","nuevo nombre");

        // filtrar datos

        // mcrud.filtrarDatos("nombre", "nuevo nombre");


    }
}
